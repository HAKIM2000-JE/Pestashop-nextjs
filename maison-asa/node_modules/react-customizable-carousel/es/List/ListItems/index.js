function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component, Children, cloneElement } from 'react';
import { ListItem } from '../ListItem';
import { cyclicArray } from '../../helpers/cyclicArray';
import { DIRECTIONS } from '../../constants';
const ADD_ITEMS_LEFT = 1;
const ADD_ITEMS_RIGHT = 1;
export class ListItems extends Component {
  get addItemsLeft() {
    const _this$props = this.props,
          scrollItems = _this$props.scrollItems,
          direction = _this$props.direction;
    return direction === DIRECTIONS.prev ? scrollItems : ADD_ITEMS_LEFT;
  }

  get addItemsRight() {
    const _this$props2 = this.props,
          scrollItems = _this$props2.scrollItems,
          direction = _this$props2.direction;
    return direction === DIRECTIONS.next ? scrollItems : ADD_ITEMS_RIGHT;
  }

  get translateByDirection() {
    const _this$props3 = this.props,
          direction = _this$props3.direction,
          itemWidth = _this$props3.itemWidth,
          scrollItems = _this$props3.scrollItems;
    return direction === DIRECTIONS.prev ? itemWidth * scrollItems : -1 * itemWidth * scrollItems;
  }

  get translateX() {
    const translateX = this.props.translateX;
    return translateX === 0 ? 0 : this.translateByDirection;
  }

  get preparedChildren() {
    const _this$props4 = this.props,
          currentIndex = _this$props4.currentIndex,
          showItemsCount = _this$props4.showItemsCount,
          children = _this$props4.children;
    return cyclicArray(children, currentIndex - this.addItemsLeft, currentIndex + showItemsCount + this.addItemsRight - 1);
  }

  get childStyle() {
    const itemWidth = this.props.itemWidth;
    return {
      width: `${itemWidth}px`,
      display: 'inline-block',
      transform: `translate(${itemWidth * this.addItemsLeft * -1}px)`
    };
  }

  get style() {
    const transitionDuration = this.props.transitionDuration;
    return {
      transform: `translate(${this.translateX + 'px'})`,
      transitionDuration: `${transitionDuration}s`
    };
  }

  cloneChildren(children, props) {
    return Children.map(children, function (child, index) {
      return cloneElement(child, _objectSpread({}, props, {
        key: index
      }));
    }, this);
  }

  render() {
    const _this$props5 = this.props,
          enableDragScroll = _this$props5.enableDragScroll,
          onNext = _this$props5.onNext,
          onPrev = _this$props5.onPrev,
          itemWidth = _this$props5.itemWidth,
          enable3d = _this$props5.enable3d,
          showItemsCount = _this$props5.showItemsCount,
          currentIndex = _this$props5.currentIndex,
          nextIndex = _this$props5.nextIndex,
          inTransition = _this$props5.inTransition,
          transitionDuration = _this$props5.transitionDuration,
          direction = _this$props5.direction,
          effectOf3d = _this$props5.effectOf3d;
    return React.createElement("div", {
      className: "rcc-ListItems",
      style: this.style
    }, this.cloneChildren(this.preparedChildren).map((child, index) => {
      return React.createElement(ListItem, {
        className: "rcc-ListItems-item",
        key: index,
        index: index,
        width: itemWidth,
        addItemsLeft: this.addItemsLeft,
        onNext: onNext,
        onPrev: onPrev,
        enableDragScroll: enableDragScroll,
        enable3d: enable3d,
        effectOf3d: effectOf3d,
        showItemsCount: showItemsCount,
        currentIndex: currentIndex,
        nextIndex: nextIndex,
        inTransition: inTransition,
        transitionDuration: transitionDuration,
        direction: direction
      }, child);
    }));
  }

}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Carousel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Icon = require("./components/Icon");

var _List = _interopRequireDefault(require("./List"));

var _Arrow = require("./Arrow");

var _Dots = require("./Dots");

var _constants = require("./constants");

require("./index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Carousel extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      currentIndex: 0,
      nextIndex: 0,
      dotsIndex: 0,
      translateX: 0,
      inTransition: false,
      scrollItems: 1
    });

    _defineProperty(this, "handleNextClick", () => {
      const _this$state = this.state,
            currentIndex = _this$state.currentIndex,
            inTransition = _this$state.inTransition,
            scrollItems = _this$state.scrollItems;
      const _this$props = this.props,
            children = _this$props.children,
            infinite = _this$props.infinite,
            transitionDuration = _this$props.transitionDuration,
            showItemsCount = _this$props.showItemsCount;

      const childrenCount = _react.Children.count(children);

      let nextIndex = currentIndex === childrenCount - 1 ? 0 : currentIndex + 1;
      if (inTransition || !infinite && currentIndex > childrenCount - 1 - showItemsCount || childrenCount < showItemsCount) return;
      this.setState({
        currentIndex,
        nextIndex,
        scrollItems,
        direction: _constants.DIRECTIONS.next,
        transitionDuration,
        translateX: undefined,
        inTransition: true
      });
      setTimeout(() => this.setState({
        currentIndex: nextIndex,
        dotsIndex: nextIndex,
        translateX: 0,
        transitionDuration: 0,
        inTransition: false
      }), transitionDuration * 1000);
    });

    _defineProperty(this, "handlePrevClick", () => {
      const _this$state2 = this.state,
            currentIndex = _this$state2.currentIndex,
            inTransition = _this$state2.inTransition,
            scrollItems = _this$state2.scrollItems;
      const _this$props2 = this.props,
            infinite = _this$props2.infinite,
            children = _this$props2.children,
            transitionDuration = _this$props2.transitionDuration,
            showItemsCount = _this$props2.showItemsCount;

      const childrenCount = _react.Children.count(children);

      const nextIndex = currentIndex === 0 ? childrenCount - 1 : currentIndex - 1;
      if (inTransition || !infinite && currentIndex === 0 || childrenCount < showItemsCount) return;
      this.setState({
        currentIndex,
        nextIndex,
        scrollItems,
        direction: _constants.DIRECTIONS.prev,
        transitionDuration,
        translateX: undefined,
        inTransition: true
      });
      setTimeout(() => this.setState({
        currentIndex: nextIndex,
        dotsIndex: nextIndex,
        translateX: 0,
        transitionDuration: 0,
        inTransition: false
      }), transitionDuration * 1000);
    });

    _defineProperty(this, "handleDotClick", index => {
      const _this$state3 = this.state,
            currentIndex = _this$state3.currentIndex,
            inTransition = _this$state3.inTransition,
            scrollItems = _this$state3.scrollItems;
      const _this$props3 = this.props,
            transitionDuration = _this$props3.transitionDuration,
            showItemsCount = _this$props3.showItemsCount,
            children = _this$props3.children,
            infinite = _this$props3.infinite;

      const childrenCount = _react.Children.count(children);

      const nextIndex = !infinite && index > childrenCount - showItemsCount ? childrenCount - showItemsCount : index;
      const difference = currentIndex - nextIndex;
      const direction = difference > 0 ? _constants.DIRECTIONS.prev : _constants.DIRECTIONS.next;
      if (inTransition || index === currentIndex) return this.setState({
        dotsIndex: index
      });
      if (nextIndex === currentIndex) return this.setState({
        dotsIndex: index
      });
      this.setState({
        direction,
        scrollItems: Math.abs(difference),
        transitionDuration,
        translateX: undefined,
        inTransition: true
      });
      setTimeout(() => this.setState({
        currentIndex: nextIndex,
        dotsIndex: index,
        scrollItems,
        translateX: 0,
        transitionDuration: 0,
        inTransition: false
      }), transitionDuration * 1000);
    });
  }

  get cssClass() {
    const className = this.props.className;
    return `rcc-Carousel ${className || ''}`;
  }

  render() {
    const _this$props4 = this.props,
          children = _this$props4.children,
          showItemsCount = _this$props4.showItemsCount,
          nextArrow = _this$props4.nextArrow,
          prevArrow = _this$props4.prevArrow,
          arrowWrapperClassName = _this$props4.arrowWrapperClassName,
          showDots = _this$props4.showDots,
          dot = _this$props4.dot,
          dotWrapperClassName = _this$props4.dotWrapperClassName,
          dotsWrapperClassName = _this$props4.dotsWrapperClassName,
          enableDragScroll = _this$props4.enableDragScroll,
          enable3d = _this$props4.enable3d,
          effectOf3d = _this$props4.effectOf3d,
          listWrapperClassName = _this$props4.listWrapperClassName;
    const _this$state4 = this.state,
          currentIndex = _this$state4.currentIndex,
          direction = _this$state4.direction,
          transitionDuration = _this$state4.transitionDuration,
          translateX = _this$state4.translateX,
          scrollItems = _this$state4.scrollItems,
          dotsIndex = _this$state4.dotsIndex,
          nextIndex = _this$state4.nextIndex,
          inTransition = _this$state4.inTransition;
    return _react.default.createElement("div", {
      className: this.cssClass
    }, _react.default.createElement("div", null, _react.default.createElement(_Arrow.Arrow, {
      arrowType: _Arrow.ARROW_TYPES.prev,
      className: arrowWrapperClassName,
      onClick: this.handlePrevClick,
      component: prevArrow
    }), _react.default.createElement(_List.default, {
      className: listWrapperClassName,
      items: children,
      currentIndex: currentIndex,
      nextIndex: nextIndex,
      showItemsCount: showItemsCount,
      direction: direction,
      transitionDuration: transitionDuration,
      translateX: translateX,
      scrollItems: scrollItems,
      onNext: this.handleNextClick,
      onPrev: this.handlePrevClick,
      enableDragScroll: enableDragScroll,
      enable3d: enable3d,
      effectOf3d: effectOf3d,
      inTransition: inTransition
    }), _react.default.createElement(_Arrow.Arrow, {
      arrowType: _Arrow.ARROW_TYPES.next,
      className: arrowWrapperClassName,
      onClick: this.handleNextClick,
      component: nextArrow
    })), !showDots ? null : _react.default.createElement(_Dots.Dots, {
      onDotClick: this.handleDotClick,
      currentIndex: dotsIndex,
      itemsCount: children.length,
      dotComponent: dot,
      dotWrapperClassName: dotWrapperClassName,
      className: dotsWrapperClassName
    }));
  }

}

exports.Carousel = Carousel;

const NextArrow = (_ref) => {
  let onClick = _ref.onClick;
  return _react.default.createElement(_Icon.ChevronRightIcon, {
    onClick: onClick
  });
};

const PrevArrow = (_ref2) => {
  let onClick = _ref2.onClick;
  return _react.default.createElement(_Icon.ChevronLeftIcon, {
    onClick: onClick
  });
};

Carousel.defaultProps = {
  transitionDuration: 0.5,
  showItemsCount: 3,
  nextArrow: NextArrow,
  prevArrow: PrevArrow,
  showDots: false,
  enableDragScroll: true,
  enable3d: false,
  effectOf3d: {
    name: 'scale'
  }
};
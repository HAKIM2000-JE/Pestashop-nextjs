"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItem = void 0;

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../../constants");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ListItem extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleDragEnd", event => {
      const _this$props = this.props,
            onNext = _this$props.onNext,
            onPrev = _this$props.onPrev;
      const dragXFrom = this.state.dragXFrom;
      const enableDragScroll = this.props.enableDragScroll;
      if (!enableDragScroll) return;
      dragXFrom > event.clientX ? onNext() : onPrev();
    });

    _defineProperty(this, "handleDragStart", event => {
      const enableDragScroll = this.props.enableDragScroll;
      if (!enableDragScroll) return;
      this.setState({
        dragXFrom: event.clientX
      });
      event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);
    });
  }

  get translateCoefficient() {
    const _this$props2 = this.props,
          direction = _this$props2.direction,
          index = _this$props2.index,
          showItemsCount = _this$props2.showItemsCount,
          inTransition = _this$props2.inTransition;
    const multiplier = 0.5;
    const z = -1 * Math.abs(0 - index + (showItemsCount + 1) / 2) * multiplier;
    if (!inTransition) return z;
    const difference = direction === _constants.DIRECTIONS.prev ? -1 : 1;
    return -1 * Math.abs(0 - index + difference + (showItemsCount + 1) / 2) * multiplier;
  }

  get style3d() {
    const name = this.props.effectOf3d.name;

    switch (name) {
      case _constants.EFFECT_3D_NAMES.daw:
        return this.style3dDaw;

      default:
        return this.style3dScale;
    }
  }

  get style3dScale() {
    const _this$props3 = this.props,
          width = _this$props3.width,
          addItemsLeft = _this$props3.addItemsLeft,
          transitionDuration = _this$props3.transitionDuration;
    const translate = `translate3d(${width * addItemsLeft * -1}px, ${0}px, ${this.translateCoefficient}px)`;
    const scale = `scale(${1 / (Math.abs(this.translateCoefficient) + 1)})`;
    return {
      width: `${width}px`,
      display: 'inline-block',
      transform: `perspective(1000px) ${translate} ${scale}`,
      transitionDuration: `${transitionDuration}s`
    };
  }

  get style3dDaw() {
    const _this$props4 = this.props,
          width = _this$props4.width,
          addItemsLeft = _this$props4.addItemsLeft,
          transitionDuration = _this$props4.transitionDuration,
          dawStep = _this$props4.effectOf3d.dawStep;
    const translate = `translate3d(${width * addItemsLeft * -1}px, ${dawStep + this.translateCoefficient * dawStep}px, ${this.translateCoefficient}px)`;
    return {
      width: `${width}px`,
      display: 'inline-block',
      transform: `perspective(1000px) ${translate}`,
      transitionDuration: `${transitionDuration}s`
    };
  }

  get style() {
    const _this$props5 = this.props,
          width = _this$props5.width,
          addItemsLeft = _this$props5.addItemsLeft,
          enable3d = _this$props5.enable3d,
          transitionDuration = _this$props5.transitionDuration;
    if (enable3d) return this.style3d;
    return {
      width: `${width}px`,
      display: 'inline-block',
      transform: `translate(${width * addItemsLeft * -1}px)`,
      transitionDuration: `${transitionDuration}s`
    };
  }

  render() {
    const _this$props6 = this.props,
          children = _this$props6.children,
          enableDragScroll = _this$props6.enableDragScroll;
    return _react.default.createElement("div", {
      className: "rcc-ListItem",
      style: this.style,
      draggable: `${enableDragScroll}`,
      onDragStart: this.handleDragStart,
      onDragEnd: this.handleDragEnd
    }, children);
  }

}

exports.ListItem = ListItem;